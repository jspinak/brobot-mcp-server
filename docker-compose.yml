version: '3.8'

services:
  brobot-mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    image: brobot-mcp-server:latest
    container_name: brobot-mcp-server
    ports:
      - "8000:8000"
    environment:
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000
      - USE_MOCK_DATA=${USE_MOCK_DATA:-false}
      - BROBOT_CLI_JAR=/app/brobot-cli.jar
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - brobot-network

  # Optional: Redis for caching (if needed in future)
  redis:
    image: redis:7-alpine
    container_name: brobot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - brobot-network
    profiles:
      - with-redis

  # Optional: PostgreSQL for persistence (if needed in future)
  postgres:
    image: postgres:15-alpine
    container_name: brobot-postgres
    environment:
      - POSTGRES_USER=brobot
      - POSTGRES_PASSWORD=brobot_pass
      - POSTGRES_DB=brobot_mcp
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U brobot"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - brobot-network
    profiles:
      - with-postgres

  # Development environment with hot reload
  brobot-mcp-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: brobot-mcp-server:dev
    container_name: brobot-mcp-dev
    ports:
      - "8001:8000"
    environment:
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000
      - USE_MOCK_DATA=true
      - RELOAD=true
      - LOG_LEVEL=debug
    volumes:
      - ./mcp_server:/app/mcp_server
      - ./tests:/app/tests
      - ./logs:/app/logs
    command: ["uvicorn", "mcp_server.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    networks:
      - brobot-network
    profiles:
      - dev

networks:
  brobot-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data: