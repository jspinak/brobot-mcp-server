name: Dependency Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 8 * * 1'  # Weekly on Monday morning

permissions:
  contents: read
  security-events: write

jobs:
  python-dependencies:
    name: Python Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
          pip install -e ".[dev,test]"
          cd brobot_client && pip install -e ".[dev]"
      
      - name: Run Safety check
        continue-on-error: true
        run: |
          safety check --json --output safety-server.json || true
          cd brobot_client && safety check --json --output ../safety-client.json || true
      
      - name: Run pip-audit
        continue-on-error: true
        run: |
          pip-audit --format json --output pip-audit-server.json || true
          cd brobot_client && pip-audit --format json --output ../pip-audit-client.json || true
      
      - name: Upload scan results
        uses: actions/upload-artifact@v3
        with:
          name: python-dependency-scans
          path: |
            safety-*.json
            pip-audit-*.json
      
      - name: Run Dependabot-like check
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
          
  java-dependencies:
    name: Java Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Run OWASP Dependency Check
        run: |
          cd brobot-cli
          ./gradlew dependencyCheckAnalyze || true
      
      - name: Upload OWASP reports
        uses: actions/upload-artifact@v3
        with:
          name: owasp-dependency-check
          path: brobot-cli/build/reports/dependency-check-report.*
      
      - name: Publish OWASP results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: brobot-cli/build/reports/dependency-check-report.sarif
          category: dependency-check

  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=pyproject.toml
      
      - name: Run Snyk on client library
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=brobot_client/pyproject.toml
      
      - name: Run Snyk on Java CLI
        uses: snyk/actions/gradle@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --project-path=brobot-cli

  trivy-scan:
    name: Trivy Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

  license-check:
    name: License Compatibility Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install license checker
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses
      
      - name: Check Python licenses
        run: |
          pip install -e ".[dev,test]"
          pip-licenses --format=json --output-file=licenses-server.json
          cd brobot_client && pip install -e ".[dev]"
          pip-licenses --format=json --output-file=../licenses-client.json
      
      - name: Check for incompatible licenses
        run: |
          # Check for GPL, AGPL, or other copyleft licenses that might conflict
          python -c "
          import json
          
          def check_licenses(file_path, component):
              with open(file_path) as f:
                  licenses = json.load(f)
              
              problematic = []
              for pkg in licenses:
                  license_name = pkg.get('License', '').lower()
                  if any(term in license_name for term in ['gpl', 'agpl', 'copyleft']):
                      if 'lgpl' not in license_name:  # LGPL is usually OK
                          problematic.append(f\"{pkg['Name']}: {pkg['License']}\")
              
              if problematic:
                  print(f'⚠️  Potentially problematic licenses in {component}:')
                  for p in problematic:
                      print(f'  - {p}')
              else:
                  print(f'✅ No problematic licenses found in {component}')
          
          check_licenses('licenses-server.json', 'server')
          check_licenses('licenses-client.json', 'client')
          "
      
      - name: Upload license reports
        uses: actions/upload-artifact@v3
        with:
          name: license-reports
          path: licenses-*.json

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: high
          deny-licenses: GPL-3.0, AGPL-3.0